{"version":3,"sources":["athens/parser.cljc"],"mappings":";;;;AAOA,AAAA,AAKA,AAAA,AAAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWG;AAoCX;;;;AAAA,AAAMC,AAGHC;AAHH,AAIE,AAACC,AACC,AAAKC,AAAgBC;AAArB,AACE,AAAI,AAAK,AAASA,AAAM,AAAS,AAACC,AAAKF;AACrC,AAAMG,AAAkB,AAACC,AAAIJ;AACvBK,AAAqB,AAAK,AAACH,AAAKF,AAAiBC;AADvD,AAEE,AAACK,AAAKH,AAAkBE;;AAC1B,AAACC,AAAKN,AAAgBC;;AAN5B,AAQEH;;AAGJ;;;AAAA,AAAMS,AAEHC;AAFH,AAGE,AAAAC,AAAA,AAAA,AAC2B;AAAOG;AAAP,AAEE,AAAA,AAAA,AAACC,AAAc,AAAChB,AAAyBe;;;AAFpCA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AADlC,AAI2B,AAAAE,AAAqBI;AAArB,AAAA,AAAAH,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAAuBD,AAASD;AAL9D,AAM2B,AAAKA,AAAcC;AAAnB,AACE,AAAA,AAAA,AAAA,AAAA,AAACL,AAAsBK,AAAMD;AAP1D,AAQ2B;AAAOL;AAAP,AACE,AAACf,AAAyBe;;;AADrBA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AARlC,AAU2B;AAAOQ;AAAP,AACE,AAACC,AAAYD;;;AADRA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAVlC,AAY2B;AAAOA;AAAP,AACE,AAACC,AAAYD;;;AADRA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;AAZlCV,AAcEF;AAdF,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAiBH;;;AAAA,AAAMW,AAEHC;AAFH,AAGE,AAAChB,AAAiB,AAACX,AAAAA,AAAAA,AAAa2B,AAAAA","names":["instaparse.core/map->Parser","instaparse.core.parser.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","instaparse.combinators-source/regexp","athens.parser/block-parser","athens.parser/combine-adjacent-strings","coll","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","elements-so-far","elmt","cljs.core/peek","previous-elements","cljs.core/pop","combined-last-string","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","athens.parser/transform-to-ast","tree","G__58028","G__58029","instaparse.core/transform","raw-contents","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p__58030","vec__58031","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","text-contents","url","cljs.core.into.cljs$core$IFn$_invoke$arity$1","chars","clojure.string.join.cljs$core$IFn$_invoke$arity$1","athens.parser/parse-to-ast","string"],"sourcesContent":["(ns athens.parser\r\n  (:require\r\n    [clojure.string :as string]\r\n    #?(:cljs [instaparse.core :as insta :refer-macros [defparser]]\r\n       :clj  [instaparse.core :as insta :refer [defparser]])))\r\n\r\n\r\n(declare block-parser)\r\n\r\n\r\n;; Instaparse docs: https://github.com/Engelberg/instaparse#readme\r\n\r\n(defparser block-parser\r\n  \"(* This first rule is the top-level one. *)\r\n   block = ( syntax-in-block / any-char )*\r\n   (* `/` ordered alternation is used to, for example, try to interpret a string beginning with '[[' as a page-link before interpreting it as raw characters. *)\r\n   \r\n   <syntax-in-block> = (page-link | block-ref | hashtag | url-image | url-link | bold)\r\n   \r\n   page-link = <'[['> any-chars <']]'>\r\n   \r\n   block-ref = <'(('> #'[a-zA-Z0-9_\\\\-]+' <'))'>\r\n   \r\n   hashtag = hashtag-bare | hashtag-delimited\r\n   <hashtag-bare> = <'#'> #'[\\\\p{L}\\\\p{M}\\\\p{N}_]+'  (* Unicode: L = letters, M = combining marks, N = numbers *)\r\n   <hashtag-delimited> = <'#'> <'[['> #'[^\\\\]]+' <']]'>\r\n\r\n   url-image = <'!'> url-link-text url-link-url\r\n   \r\n   url-link = url-link-text url-link-url\r\n   <url-link-text> = <'['> url-link-text-contents <']'>\r\n   url-link-text-contents = ( (bold | backslash-escaped-right-bracket) / any-char )*\r\n   <backslash-escaped-right-bracket> = <'\\\\\\\\'> ']'\r\n   <url-link-url> = <'('> url-link-url-parts <')'>\r\n   url-link-url-parts = url-link-url-part+\r\n   <url-link-url-part> = (backslash-escaped-paren | '(' url-link-url-part* ')') / any-char\r\n   <backslash-escaped-paren> = <'\\\\\\\\'> ('(' | ')')\r\n   \r\n   bold = <'**'> any-chars <'**'>\r\n   \r\n   (* It\u2019s useful to extract this rule because its transform joins the individual characters everywhere it\u2019s used. *)\r\n   (* However, I think in many cases a more specific rule can be used. So we will migrate away from uses of this rule. *)\r\n   any-chars = any-char+\r\n   \r\n   <any-char> = #'\\\\w|\\\\W'\r\n   \")\r\n\r\n\r\n(defn combine-adjacent-strings\r\n  \"In a sequence of strings mixed with other values, returns the same sequence with adjacent strings concatenated.\r\n   (If the sequence contains only strings, use clojure.string/join instead.)\"\r\n  [coll]\r\n  (reduce\r\n    (fn [elements-so-far elmt]\r\n      (if (and (string? elmt) (string? (peek elements-so-far)))\r\n        (let [previous-elements (pop elements-so-far)\r\n              combined-last-string (str (peek elements-so-far) elmt)]\r\n          (conj previous-elements combined-last-string))\r\n        (conj elements-so-far elmt)))\r\n    []\r\n    coll))\r\n\r\n\r\n(defn transform-to-ast\r\n  \"Transforms the Instaparse output tree to an abstract syntax tree for Athens markup.\"\r\n  [tree]\r\n  (insta/transform\r\n    {:block                  (fn [& raw-contents]\r\n                                ;; use combine-adjacent-strings to collapse individual characters from any-char into one string\r\n                               (into [:block] (combine-adjacent-strings raw-contents)))\r\n     :url-image              (fn [[text-contents] url]\r\n                               (into [:url-image {:url url :alt text-contents}]))\r\n     :url-link               (fn [text-contents url]\r\n                               (into [:url-link {:url url}] text-contents))\r\n     :url-link-text-contents (fn [& raw-contents]\r\n                               (combine-adjacent-strings raw-contents))\r\n     :url-link-url-parts     (fn [& chars]\r\n                               (string/join chars))\r\n     :any-chars              (fn [& chars]\r\n                               (string/join chars))}\r\n    tree))\r\n\r\n\r\n(defn parse-to-ast\r\n  \"Converts a string of block syntax to an abstract syntax tree for Athens markup.\"\r\n  [string]\r\n  (transform-to-ast (block-parser string)))\r\n"]}