{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":"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","names":["athens.parse-renderer/page-link","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.style/OPACITIES","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.parse-renderer/hashtag","athens.parse-renderer/image","athens.parse-renderer/url-link","athens.parse-renderer/block-ref","athens.parse-renderer/transform","tree","G__58059","G__58060","instaparse.core/transform","contents","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","title","node","G__58061","G__58062","G__58063","posh.reagent/pull","athens.db/dsdb","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","e","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","uid","block","G__58064","G__58065","G__58066","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","G__58067","athens.parse-renderer/parse-and-render","tag-name","G__58068","G__58069","G__58070","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","p__58071","map__58072","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","alt","p__58074","map__58075","text","string","result","athens.parser/parse-to-ast","instaparse.core/failure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["(ns athens.parse-renderer\r\n  (:require\r\n    [athens.db :as db]\r\n    [athens.parser :as parser]\r\n    [athens.router :refer [navigate-uid]]\r\n    [athens.style :refer [color OPACITIES]]\r\n    [instaparse.core :as insta]\r\n    [posh.reagent :refer [pull #_q]]\r\n    [stylefy.core :as stylefy :refer [use-style]]))\r\n\r\n\r\n(declare parse-and-render)\r\n\r\n\r\n;;; Styles\r\n\r\n(def page-link {:cursor \"pointer\"\r\n                :text-decoration \"none\"\r\n                :color (color :link-color)\r\n                :position \"relative\"\r\n                ::stylefy/manual [[:.formatting {:color (color :body-text-color)\r\n                                                 :opacity (:opacity-low OPACITIES)}]\r\n                                  [:&:after {:content \"''\"\r\n                                             :display \"inline-block\"\r\n                                             :position \"absolute\"\r\n                                             :top \"-1px\"\r\n                                             :right \"-0.2em\"\r\n                                             :left \"-0.2em\"\r\n                                             :bottom \"-1px\"\r\n                                             :z-index \"-1\"\r\n                                             :opacity \"0\"\r\n                                             :border-radius \"4px\"\r\n                                             :transition \"all 0.05s ease\"\r\n                                             :background (color :link-color 0.1)}]\r\n                                  [:&:hover:after {:opacity \"1\"}]]})\r\n\r\n\r\n(def hashtag {::stylefy/mode [[:hover {:text-decoration \"underline\"}]]\r\n              ::stylefy/manual [[:.formatting {:opacity (:opacity-low OPACITIES)}]]})\r\n\r\n\r\n(def image {:border-radius \"2px\"})\r\n\r\n\r\n(def url-link {:cursor \"pointer\"\r\n               :text-decoration \"none\"\r\n               :color (color :link-color)\r\n               ::stylefy/mode [[:hover {:text-decoration \"underline\"}]]})\r\n\r\n\r\n(def block-ref {:font-size \"0.9em\"\r\n                :transition \"background 0.05s ease\"\r\n                :border-bottom [[\"1px\" \"solid\" (color :highlight-color)]]\r\n                ::stylefy/mode [[:hover {:background-color (color :highlight-color :opacity-lower)\r\n                                         :cursor \"alias\"}]]})\r\n\r\n\r\n;;; Components\r\n\r\n\r\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\r\n(defn transform\r\n  \"Transforms Instaparse output to Hiccup.\"\r\n  [tree]\r\n  (insta/transform\r\n    {:block     (fn [& contents]\r\n                  (concat [:span {:class \"block\"}] contents))\r\n     :page-link (fn [title]\r\n                  (let [node (pull db/dsdb '[*] [:node/title title])]\r\n                    [:span (use-style page-link {:class \"page-link\"})\r\n                     [:span {:class \"formatting\"} \"[[\"]\r\n                     [:span {:on-click (fn [e] (navigate-uid (:block/uid @node) e))} title]\r\n                     [:span {:class \"formatting\"} \"]]\"]]))\r\n     :block-ref (fn [uid]\r\n                  (let [block (pull db/dsdb '[*] [:block/uid uid])]\r\n                    [:span (use-style block-ref {:class \"block-ref\"})\r\n                     [:span {:class \"contents\" :on-click #(navigate-uid uid)} (parse-and-render (:block/string @block))]]))\r\n     :hashtag   (fn [tag-name]\r\n                  (let [node (pull db/dsdb '[*] [:node/title tag-name])]\r\n                    [:span (use-style hashtag) {:class    \"hashtag\"\r\n                                                :on-click #(navigate-uid (:block/uid @node))}\r\n                     [:span {:class \"formatting\"} \"#\"]\r\n                     [:span {:class \"contents\"} tag-name]]))\r\n     :url-image (fn [{url :url alt :alt}]\r\n                  [:img (use-style image {:class \"url-image\"\r\n                                          :alt   alt\r\n                                          :src   url})])\r\n     :url-link  (fn [{url :url} text]\r\n                  [:a (use-style url-link {:class \"url-link\"\r\n                                           :href  url})\r\n                   text])\r\n     :bold      (fn [text]\r\n                  [:strong {:class \"contents bold\"} text])}\r\n    tree))\r\n\r\n\r\n(defn parse-and-render\r\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\r\n  [string]\r\n  (let [result (parser/parse-to-ast string)]\r\n    (if (insta/failure? result)\r\n      [:span\r\n       {:title (pr-str (insta/get-failure result))\r\n        :style {:color \"red\"}}\r\n       string]\r\n      [vec (transform result)])))\r\n"]}