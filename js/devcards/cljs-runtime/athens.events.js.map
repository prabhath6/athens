{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["cljs.core/deref","athens.events/get-block","id","G__61238","G__61239","G__61240","posh.reagent/pull","athens.db/dsdb","athens.events/get-parent","eid","G__61244","G__61245","datascript.core/entity","cljs.core/first","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__46627__auto__","result__46628__auto__","debux.common.util/send-trace!","e","e61246","_","athens.db/rfdb","db","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__61247","vec__61248","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","item","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","p__61251","vec__61252","e61255","p__61256","vec__61257","show","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__61260","vec__61261","G__61266","fexpr__61265","e61264","p__61267","vec__61268","selected-page","fexpr__61271","cljs.core/set","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","p__61272","vec__61273","uid","cljs.core/dissoc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__61276","p__61277","map__61278","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__61279","G__61285","G__61286","G__61287","e61284","p__61288","p__61289","map__61290","vec__61291","block","G__61295","G__61296","G__61297","datascript.core/pull","new-item","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-items","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","e61298","error","cljs.core/assoc-in","e61299","e61300","p__61301","vec__61302","e61305","p__61306","vec__61307","p__61310","vec__61311","map","p__61314","vec__61315","e61318","athens.db/athens-url","p__61319","vec__61320","json-str","datoms","athens.db/str-to-db-tx","new-db","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","p__61323","map__61324","temp__5733__auto__","stored","js/localStorage.getItem","datascript.transit/read-transit-str","p__61326","vec__61327","temp__5735__auto__","prev","p1__61330#","athens.db/find-prev","athens.db/history","next","p1__61331#","athens.db/find-next","p__61332","vec__61333","title","now","athens.util/now-ts","athens.events/rules","p__61336","vec__61337","_uid","athens.events/split-block","val","sel-start","parent","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","new-uid","athens.util/gen-block-uid","new-block","reindex","G__61344","G__61345","G__61346","G__61347","G__61348","datascript.core/q","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__61340","vec__61341","order","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.events/bump-up","G__61353","G__61354","G__61355","G__61356","G__61357","p__61349","vec__61350","p__61358","vec__61359","cljs.core/empty?","p__61363","vec__61364","older-sib","p1__61362#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","reindex-blocks","G__61371","G__61372","G__61373","G__61374","G__61375","p__61367","vec__61368","p__61376","vec__61377","grandpa","reindex-grandpa","G__61384","G__61385","G__61386","G__61387","G__61388","p__61380","vec__61381","and__4174__auto__","athens.events/target-child","source","source-parent","target","new-parent-children","G__61393","G__61394","G__61395","G__61396","G__61397","p__61389","vec__61390","new-target-children","G__61402","G__61403","G__61404","G__61405","G__61406","p__61398","vec__61399","athens.events/between","s","t","x","athens.events/target-sibling-same-parent","t-order","s-order","inc-or-dec","cljs.core/dec","G__61411","G__61412","G__61413","G__61414","G__61415","G__61416","G__61417","p__61407","vec__61408","athens.events/target-sibling-diff-parent","target-parent","source-parent-children","G__61422","G__61423","G__61424","G__61425","G__61426","p__61418","vec__61419","target-parent-children","G__61431","G__61432","G__61433","G__61434","G__61435","p__61427","vec__61428","p__61436","vec__61437","e61440","p__61441","vec__61442","source-uid","target-uid","kind","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [posh.reagent :refer [pull #_q #_pull-many]]\n    [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n\n;; Utils\n\n\n(defn get-block\n  [id]\n  @(pull db/dsdb '[:db/id :block/uid :block/order {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (let [eid (-> (d/entity @db/dsdb id)\n              :block/_children\n              first\n              :db/id)]\n    (get-block eid)))\n\n\n\n;;; Events\n\n\n;; app-db events\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :toggle-athena\n  (fn [db _]\n    (update db :athena not)))\n\n\n(reg-event-db\n  :toggle-devtool\n  (fn [db _]\n    (update db :devtool not)))\n\n\n(reg-event-db\n  :toggle-left-sidebar\n  (fn [db _]\n    (update db :left-sidebar not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n(reg-event-db\n  :update-show-recent?\n  (fn-traced [db [_ show]]\n    (assoc db :show-recent? show)))\n\n\n(reg-event-db\n  :recent-items\n  (fn-traced [db [_ selected-page]]\n    (when (nil? ((set (:recent-items db)) selected-page))\n      (update db :recent-items conj selected-page))))\n\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n;; TODO: toggle open right sidebar if not open\n;; FIXME: what happens when item is already in sidebar? all indices increment, which is not right\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n    (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n          new-item  (merge block {:open true :index -1})\n          new-items (assoc (:right-sidebar/items db) uid new-item)\n          inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                               {}\n                               new-items)\n          sorted-items (into (sorted-map-by (fn [k1 k2]\n                                              (compare\n                                                [(get-in new-items [k1 :index]) k2]\n                                                [(get-in new-items [k2 :index]) k1]))) inc-items)]\n      {:db (assoc db :right-sidebar/items sorted-items)\n       :dispatch (when (false? (:right-sidebar/open db))\n                   [:right-sidebar/toggle])})))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(reg-event-db\n  :editing-uid\n  (fn-traced [db [_ uid]]\n             (assoc db :editing-uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip-uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip-uid uid)))\n\n\n;;; event effects\n\n\n(reg-event-fx\n  :boot\n  (fn-traced [_ _]\n             {:db         db/rfdb\n              :async-flow {:first-dispatch [:get-local-storage-db]\n                           :rules          [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n                                            {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}]}}))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n\n;; FIXME? I reset db/dsdb and store its value in localStorage in the same step. How do we ensure the order of operations is correct?\n(reg-event-fx\n  :parse-datoms\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:reset-conn new-db\n       :set-local-storage-db nil})))\n\n\n(reg-event-fx\n  :get-local-storage-db\n  (fn [{:keys [db]}]\n    (if-let [stored (js/localStorage.getItem \"datascript/DB\")]\n      {:reset-conn (dt/read-transit-str stored)\n       :db         (assoc db :loading false)}\n      {:dispatch [:get-datoms]})))\n\n\n(reg-event-fx\n  :transact-event\n  (fn [_ [_ datoms]]\n    {:transact datoms}))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn next})))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)]\n          ;;uid (gen-block-uid)]\n      {:transact [{:db/add -1 :node/title title :block/uid uid :create/time now :edit/time now}]})))\n\n\n;;; dsdb events (transactions)\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]])\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ _uid]]))\n\n\n;; TODO but how to set focus... especially async\n(defn split-block\n  [uid val sel-start]\n  (let [parent (get-parent [:block/uid uid])\n        block (get-block [:block/uid uid])\n        head (subs val 0 sel-start)\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                       @db/dsdb rules (:db/id parent) (:block/order block))\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    {:transact [[:db/add (:db/id block) :block/string head]\n                {:db/id (:db/id parent)\n                 :block/children reindex}]\n     :dispatch [:editing-uid new-uid]}))\n\n\n(defn bump-up\n  [uid val sel-start]\n  (let [parent (get-parent [:block/uid uid])\n        block (get-block [:block/uid uid])\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                       @db/dsdb rules (:db/id parent) (inc (:block/order block)))\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    {:transact [[:db/add (:db/id block) :block/string \"\"]\n                {:db/id (:db/id parent) :block/children reindex}]\n     :dispatch [:editing-uid new-uid]}))\n\n\n;; TODO: if enter at end of block, if block open, insert new 0th child. otherwise, add sibling (default behavior right now)\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val sel-start]]\n    (cond\n      (not (zero? sel-start)) (split-block uid val sel-start)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? sel-start) val) (bump-up uid val sel-start))))\n\n\n;; TODO: no-op when indenting as the right-most child\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (let [block (get-block [:block/uid uid])\n          parent (get-parent [:block/uid uid])\n          older-sib (->> parent\n                      :block/children\n                      (filter #(= (dec (:block/order block)) (:block/order %)))\n                      first\n                      :db/id\n                      get-block)\n          new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n          reindex-blocks (->> (d/q '[:find ?ch ?new-o\n                                     :in $ % ?p ?at\n                                     :where (dec-after ?p ?at ?ch ?new-o)]\n                                @db/dsdb rules (:db/id parent) (:block/order block))\n                           (map (fn [[id order]] {:db/id id :block/order order})))]\n      {:transact [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                  {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                  {:db/id (:db/id parent) :block/children reindex-blocks}]}))) ;; reindex parent\n\n\n;; TODO: no-op when user tries to unindent to a child out of current context\n(reg-event-fx\n  :unindent\n  (fn [_ [_ uid]]\n    (let [parent (get-parent [:block/uid uid])\n          grandpa (get-parent (:db/id parent))\n          new-block {:block/uid uid :block/order (inc (:block/order parent))}\n          reindex-grandpa (->> (d/q '[:find ?ch ?new-order\n                                      :in $ % ?grandpa ?parent-order\n                                      :where (inc-after ?grandpa ?parent-order ?ch ?new-order)]\n                                 @db/dsdb rules (:db/id grandpa) (:block/order parent))\n                            (map (fn [[id order]] {:db/id id :block/order order}))\n                            (concat [new-block]))]\n      (when (and parent grandpa)\n        {:transact [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                    {:db/id (:db/id grandpa) :block/children reindex-grandpa}]}))))\n\n\n(defn target-child\n  [source source-parent target]\n  (let [new-block {:block/uid (:block/uid source) :block/order 0}\n        new-parent-children (->> (d/q '[:find ?ch ?new-order\n                                         :in $ % ?parent ?source-order\n                                         :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                    @db/dsdb rules (:db/id source-parent) (:block/order source))\n                              (map (fn [[id order]] {:db/id id :block/order order})))\n        new-target-children (->> (d/q '[:find ?ch ?new-order\n                                        :in $ % ?parent ?at\n                                        :where (inc-after ?parent ?at ?ch ?new-order)]\n                                   @db/dsdb rules (:dbid target) 0)\n                              (map (fn [[id order]] {:db/id id :block/order order}))\n                              (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]] ;; retract source from parent\n     {:db/add (:db/id source-parent) :block/children new-parent-children} ;; reindex parent without source\n     {:db/id (:db/id target) :block/children new-target-children}])) ;; reindex target. include source\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn target-sibling-same-parent\n  [source target parent]\n  (let [t-order (:block/order target)\n        s-order (:block/order source)\n        new-block {:db/id (:db/id source) :block/order (inc t-order)}\n        inc-or-dec (if (> s-order t-order) inc dec)\n        reindex (->> (d/q '[:find ?ch ?new-order\n                            :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                            :where\n                            [?parent :block/children ?ch]\n                            [?ch :block/order ?order]\n                            [(?between ?s-order ?t-order ?order)]\n                            [(?inc-or-dec ?order) ?new-order]]\n                       @db/dsdb (:db/id parent) s-order t-order between inc-or-dec)\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    [{:db/add (:db/id parent) :block/children reindex}]))\n\n\n(defn target-sibling-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        source-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?source-order\n                                           :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id source-parent) (:block/order source))\n                                 (map (fn [[id order]] {:db/id id :block/order order})))\n        target-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?target-order\n                                           :where (inc-after ?parent ?target-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id target-parent) (:block/order target))\n                                 (map (fn [[id order]] {:db/id id :block/order order}))\n                                 (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children source-parent-children} ;; reindex source\n     {:db/id (:db/id target-parent) :block/children target-parent-children}])) ;; reindex target\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (let [source        (get-block [:block/uid source-uid])\n                   target        (get-block [:block/uid target-uid])\n                   source-parent (get-parent [:block/uid source-uid])\n                   target-parent (get-parent [:block/uid target-uid])]\n               {:transact\n                (cond\n                  ;; child always has same behavior: move to first child of target\n                  (= kind :child) (target-child source source-parent target)\n                  ;; do nothing if target is directly above source\n                  (and (= source-parent target-parent)\n                    (= 1 (- (:block/order source) (:block/order target)))) nil\n                  ;; re-order blocks between source and target\n                  (= source-parent target-parent) (target-sibling-same-parent source target source-parent)\n                  ;;; when parent is different, re-index both source-parent and target-parent\n                  (not= source-parent target-parent) (target-sibling-diff-parent source target source-parent target-parent))})))\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}