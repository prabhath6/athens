{"version":3,"sources":["athens/devcards/filters.cljs"],"mappings":"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","names":["athens.devcards.filters/container-style","athens.devcards.filters/title-style","athens.style/OPACITIES","athens.devcards.filters/search-style","athens.devcards.filters/controls-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.devcards.filters/sort-control-style","athens.devcards.filters/reset-control-style","athens.devcards.filters/sort-indicator-style","athens.devcards.filters/filter-list-style","athens.devcards.filters/filter-style","athens.devcards.filters/added-style","athens.devcards.filters/excluded-style","athens.devcards.filters/count-style","athens.devcards.filters/filter-name-style","athens.devcards.filters/state-style","athens.devcards.filters/no-items-message-style","athens.devcards.filters/items","athens.devcards.filters/filters-el","_uid","items","s","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","sort_","cljs.core/deref","filtered-items","cljs.core/reduce-kv","m","k","v","cljs.core/re-find","cljs.core/re-pattern","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","num-filters","cljs.core/count","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__60798","vec__60799","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_k","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.devcards.textinput/textinput","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.FilterList","e","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","athens.devcards.buttons/button","js/module$node_modules$$material_ui$icons$index.Sort","_","cljs.core/assoc","js/module$node_modules$$material_ui$icons$index.ArrowDownward","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__60803","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__60805","cljs.core/chunk-buffer","i__60804","vec__60806","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","map__60809","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60802","cljs.core/chunk-rest","vec__60812","cljs.core/first","map__60815","cljs.core/cons","cljs.core/rest","count","state","added?","excluded?","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__60811","js/Error","G__60817","js/module$node_modules$$material_ui$icons$index.Check","js/module$node_modules$$material_ui$icons$index.Block","athens.devcards.filters/devcard-wrapper","devcards.core/register-card","devcards.core/card-base","js/athens","js/athens.devcards","js/athens.devcards.filters","js/athens.devcards.filters.t_athens$devcards$filters60818","athens.devcards.filters/t_athens$devcards$filters60818","_60820","meta60819","this__42498__auto__","devcard-opts__42499__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__42517__auto__","cljs.core/fn?","data-atom__42518__auto__","owner__42519__auto__","reagent.core/as-element","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.filters/->t_athens$devcards$filters60818","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.filters\r\n  (:require\r\n    [\"@material-ui/icons\" :as mui-icons]\r\n    [athens.devcards.buttons :refer [button]]\r\n    [athens.devcards.textinput :refer [textinput]]\r\n    [athens.style :refer [color OPACITIES]]\r\n    [cljsjs.react]\r\n    [cljsjs.react.dom]\r\n    [devcards.core :refer [defcard-rg]]\r\n    #_[re-frame.core :as re-frame :refer [dispatch]]\r\n    [reagent.core :as r]\r\n    [stylefy.core :as stylefy :refer [use-style #_use-sub-style]]))\r\n\r\n\r\n;;; Styles\r\n\r\n\r\n(def container-style\r\n  {:flex-basis \"30em\"\r\n   :display \"flex\"\r\n   :flex-direction \"column\"})\r\n\r\n;; TODO: move to new Popover component as Title prop\r\n(def title-style\r\n  {:text-align \"center\"\r\n   :opacity (:opacity-high OPACITIES)})\r\n\r\n\r\n;; TODO: Replace with styled Input component\r\n(def search-style\r\n  {:align-self \"stretch\"\r\n   :display \"flex\"})\r\n\r\n\r\n(def controls-style\r\n  {:width \"100%\"\r\n   :display \"flex\"\r\n   :flex \"0 0 auto\"\r\n   :font-size \"12px\"\r\n   :align-items \"center\"\r\n   :text-align \"right\"\r\n   :border-bottom (str \"1px solid \" (color :panel-color))\r\n   :margin \"4px 0\"\r\n   :padding-bottom \"4px\"\r\n   :justify-content \"space-between\"\r\n   :font-weight \"500\"\r\n   :color (color :body-text-color :opacity-high)\r\n   ::stylefy/manual [[:svg {:font-size \"20px\"}]]})\r\n\r\n\r\n(def sort-control-style {:padding \"4px 6px\"\r\n                         ::stylefy/manual [[:&:hover :&:focus [:& [:+ [:span {:opacity 1}]]]]]})\r\n\r\n\r\n(def reset-control-style {:margin-left \"0.5em\"})\r\n\r\n\r\n(def sort-indicator-style {:margin-right \"auto\"\r\n                           :transition \"all 0.2s ease\"\r\n                           :opacity 0\r\n                           :display \"flex\"\r\n                           :flex-direction \"row\"\r\n                           :align-items \"center\"\r\n                           :margin-left \"0.5em\"})\r\n\r\n\r\n(def filter-list-style\r\n  {:align-self \"stretch\"\r\n   :display \"flex\"\r\n   :flex \"1 1 100%\"\r\n   :overflow-y \"auto\"\r\n   :flex-direction \"column\"})\r\n\r\n\r\n(def filter-style\r\n  {:width           \"100%\"\r\n   :display         \"flex\"\r\n   :justify-content \"space-between\"\r\n   :padding         \"2px 8px\"\r\n   :align-items     \"center\"\r\n   :border-radius   \"4px\"\r\n   :margin-block-end \"1px\"\r\n   :user-select     \"none\"\r\n   :transition      \"all 0.1s ease\"\r\n   ::stylefy/manual [[:&:hover {:background (color :panel-color :opacity-med)}]\r\n                     [:&:active {:transform \"scale(0.99)\"}]]})\r\n\r\n\r\n(def added-style\r\n  {:background-color (color :link-color :opacity-low)\r\n   :color (color :link-color)\r\n   ::stylefy/manual [[:&:hover {:background (color :link-color 0.3)}]\r\n                     [:&:active {:transform \"scale(0.99)\"}]]})\r\n\r\n\r\n(def excluded-style\r\n  {:background-color (color :warning-color :opacity-low)\r\n   :color (color :warning-color)\r\n   ::stylefy/manual [[:&:hover {:background (color :warning-color 0.3)}]\r\n                     [:&:active {:transform \"scale(0.99)\"}]]})\r\n\r\n\r\n(def count-style\r\n  {:padding \"0 1em 0 0\"\r\n   :color (color :body-text-color)\r\n   :font-weight \"bold\"\r\n   :font-size \"11px\"\r\n   :text-align \"right\"\r\n   :flex \"0 0 3em\"})\r\n\r\n\r\n(def filter-name-style\r\n  {:flex \"1 1 100%\"\r\n   :color (color :body-text-color)\r\n   :text-align \"left\"})\r\n\r\n\r\n(def state-style\r\n  {:font-weight \"bold\"\r\n   :flex \"0 0 auto\"\r\n   :font-size \"12px\"\r\n   :display \"flex\"\r\n   :align-items \"center\"\r\n   :letter-spacing \"0.1em\"\r\n   :text-transform \"uppercase\"\r\n   :margin-right \"0.2em\"\r\n   ::stylefy/manual [[:svg {:margin-left \"0.2em\"\r\n                            :margin-right \"0.2em\"\r\n                            :font-size \"18px\"}]]})\r\n\r\n\r\n(def no-items-message-style\r\n  {:text-align \"center\"\r\n   :opacity (:opacity-med OPACITIES)\r\n   :margin \"0\"})\r\n\r\n\r\n;;; Utilities\r\n\r\n\r\n(def items\r\n  {\"Amet\"   {:count 6 :state :added}\r\n   \"At\"     {:count 130 :state :excluded}\r\n   \"Diam\"   {:count 6}\r\n   \"Donec\"  {:count 6}\r\n   \"Elit\"   {:count 30}\r\n   \"Elitudomin mesucen defibocutruon\"  {:count 1}\r\n   \"Erat\"   {:count 11}\r\n   \"Est\"    {:count 2}\r\n   \"Eu\"     {:count 2}\r\n   \"Ipsum\"  {:count 2 :state :excluded}\r\n   \"Magnis\" {:count 10 :state :added}\r\n   \"Metus\"  {:count 29}\r\n   \"Mi\"     {:count 7 :state :added}\r\n   \"Quam\"   {:count 1}\r\n   \"Turpis\" {:count 97}\r\n   \"Vitae\"  {:count 1}})\r\n\r\n\r\n;;; Components\r\n\r\n\r\n(defn filters-el\r\n  [_uid items]\r\n  (let [s (r/atom {:sort :lex\r\n                   :items items\r\n                   :search \"\"})]\r\n    (fn [_uid items]\r\n      (let [sort_ (:sort @s)\r\n            filtered-items (reduce-kv\r\n                             (fn [m k v]\r\n                               (if (re-find\r\n                                     (re-pattern (str \"(?i)\" (:search @s)))\r\n                                     k)\r\n                                 (assoc m k v)\r\n                                 m))\r\n                             {}\r\n                             (:items @s))\r\n            items (if (= sort_ :lex)\r\n                    (into (sorted-map) filtered-items)\r\n                    (into (sorted-map-by (fn [k1 k2]\r\n                                           (compare\r\n                                            [(get-in items [k2 :count]) k1]\r\n                                            [(get-in items [k1 :count]) k2]))) filtered-items))\r\n            num-filters (count (filter\r\n                                (fn [[_k v]] (:state v))\r\n                                items))]\r\n\r\n        [:div (use-style container-style)\r\n         [:h5 (use-style title-style) \"Filter\"]\r\n\r\n         ;; Search\r\n         [textinput (use-style search-style\r\n                               {:type        \"search\"\r\n                                :autoFocus  true\r\n                                :placeholder \"Type to find filters\"\r\n                                :icon [:> mui-icons/FilterList]\r\n                                :value (:search @s)\r\n                                :on-change   (fn [e]\r\n                                               (swap! s assoc-in [:search] (.. e -target -value)))})]\r\n\r\n         ;; Controls\r\n         [:div (use-style controls-style)\r\n          [button {:label       [:> mui-icons/Sort]\r\n                   :style sort-control-style\r\n                   :on-click-fn (fn [_]\r\n                                  (swap! s assoc :sort (if (= sort_ :lex)\r\n                                                         :count\r\n                                                         :lex)))}]\r\n          [:span (use-style sort-indicator-style) [:<> [:> mui-icons/ArrowDownward] (if (= sort_ :lex) \"Title\" \"Number\")]]\r\n          [:span (str num-filters \" Active\")]\r\n          [button {:label \"Reset\"\r\n                   :style reset-control-style\r\n                   :on-click-fn (fn [_]\r\n                                  (swap! s assoc :items\r\n                                         (reduce-kv\r\n                                          (fn [m k v]\r\n                                            (assoc m k (dissoc v :state)))\r\n                                          {}\r\n                                          (:items @s))))}]]\r\n\r\n\r\n         ;; List\r\n         [:div (use-style filter-list-style)\r\n          (if (> (count items) 0)\r\n            (doall\r\n             (for [[k {:keys [count state]}] items\r\n                   :let [added?    (= state :added)\r\n                         excluded? (= state :excluded)]]\r\n               ^{:key k}\r\n               [:div (use-style (merge filter-style\r\n                                       (cond\r\n                                         added? added-style\r\n                                         excluded? excluded-style))\r\n                                {:on-click (fn [_]\r\n                                             (swap! s assoc-in [:items k :state]\r\n                                                    (case state\r\n                                                      nil :added\r\n                                                      :added :excluded\r\n                                                      :excluded nil)))})\r\n\r\n               ;; Left\r\n                [:span (use-style count-style) count]\r\n                [:span (use-style filter-name-style) k]\r\n\r\n               ;; Right\r\n                (when (or added? excluded?)\r\n                  [:span (use-style state-style) state\r\n                   (if added?\r\n                     [:> mui-icons/Check]\r\n                     [:> mui-icons/Block])])]))\r\n            [:p (use-style no-items-message-style) \"No filters found\"])]]))))\r\n\r\n\r\n;;; Devcards\r\n\r\n\r\n(def devcard-wrapper {:width \"300px\"})\r\n\r\n\r\n(defcard-rg Filters\r\n  [:div (use-style devcard-wrapper)\r\n  [filters-el \"((some-uid))\" items]])\r\n"]}