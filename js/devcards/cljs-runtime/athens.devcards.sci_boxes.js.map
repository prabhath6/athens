{"version":3,"sources":["athens/devcards/sci_boxes.cljs"],"mappings":"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","names":["athens.devcards.sci-boxes/log","js/console.log","athens.devcards.sci-boxes/trace","x","devcards.core/register-card","devcards.core/card-base","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","athens.devcards.sci-boxes/remove-from-vec","v","index","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","athens.devcards.sci-boxes/index-of","col","val","cljs.core/first","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","idx","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","iter__4582__auto__","s__60707","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__60709","cljs.core/chunk-buffer","i__60708","vec__60710","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60706","cljs.core/chunk-rest","vec__60713","cljs.core/cons","cljs.core/rest","s","opts","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","athens.devcards.sci-boxes/key-code->key","athens.devcards.sci-boxes/empty-box","js/athens","js/athens.devcards","js/athens.devcards.sci-boxes","js/athens.devcards.sci-boxes.box-state*","athens.devcards.sci-boxes/box-state*","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","athens.devcards.sci-boxes/get-parent-id","boxes","child-id","cljs.core/some","p__60716","vec__60717","id","box","p__60720","map__60721","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.devcards.sci-boxes/sci-node?","str-content","clojure.string/starts-with?","p__60723","map__60724","athens.devcards.sci-boxes/eval-box","parent","code","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","result","e60726","js/Error","e","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","athens.devcards.sci-boxes/next-box-id","visited","cljs.core/not","go-up","parent-id","temp__5733__auto__","children","unvisited-child","p1__60727#","siblings","unvisited-sibling","p1__60728#","athens.devcards.sci-boxes/eval-all-boxes","boxes'","visited'","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","id'","p__60729","map__60730","athens.devcards.sci-boxes/add-child","children-ids","new-idx","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","athens.devcards.sci-boxes/remove-child","cljs.core.update.cljs$core$IFn$_invoke$arity$4","p__60732","map__60733","athens.devcards.sci-boxes/add-sibling","next-id","state","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","cljs.core.update.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","p__60735","map__60736","athens.devcards.sci-boxes/delete-box","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","athens.devcards.sci-boxes/update-box-content","value","athens.devcards.sci-boxes/handle-return-key!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","athens.devcards.sci-boxes/handle-backspace-key!","map__60738","cljs.core/deref","cljs.core/empty?","athens.devcards.sci-boxes/handle-box-key-down!","key-code","shift?","k","G__60740","cljs.core/Keyword","athens.devcards.sci-boxes/handle-box-change!","target","p1__60741#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","athens.devcards.sci-boxes/sci-result-component","map__60742","hiccup","athens.devcards.sci-boxes/sci-result-wrapper","err*","reagent.core/create-class","err","info","cljs.core/reset!","vec__60744","_","athens.devcards.sci-boxes/box-component","map__60749","map__60750","p1__60747#","p1__60748#","cljs.core.into.cljs$core$IFn$_invoke$arity$2","s__60754","b__60756","i__60755","iter__60753","js/athens.devcards.sci-boxes.t_athens$devcards$sci_boxes60757","athens.devcards.sci-boxes/t_athens$devcards$sci_boxes60757","_60759","meta60758","this__42498__auto__","devcard-opts__42499__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__42517__auto__","cljs.core/fn?","data-atom__42518__auto__","owner__42519__auto__","reagent.core/as-element","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.sci-boxes/->t_athens$devcards$sci_boxes60757","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.sci-boxes\r\n  (:require\r\n    [cljsjs.react]\r\n    [cljsjs.react.dom]\r\n    [clojure.string :as str]\r\n    [devcards.core :as devcards :refer [defcard defcard-rg]]\r\n    [reagent.core :as rg]\r\n    [sci.core :as sci]))\r\n\r\n\r\n(def log js/console.log)\r\n\r\n\r\n(defn trace\r\n  [x]\r\n  (log x) x)\r\n\r\n\r\n(defcard \"\r\n  # An experiment in connecting mini SCI environments\r\n\r\n  Let's say you could put executable code in Athens' blocks.\r\n\r\n  Some questions:\r\n   - In what order do we evaluate our blocks?\r\n   - How do we pass data in and out of our blocks?\r\n   - How do we handle async code?\r\n\r\n  Attempted approach:\r\n   - Blocks are passed the evaluated result of their parent (`*1`)\r\n\r\n   Some other approaches:\r\n   - Blocks inherit the environment of their parent\r\n   - Blocks mutate a global environment\r\n   - Blocks are babashka pods?\r\n\r\n  Fun stuff to try:\r\n   - Pass in the datascript connection\r\n   - `spit`/`slurp` to IPFS etc.\r\n  \")\r\n\r\n\r\n(defcard sci\r\n  \"## Small Clojure Interpreter\r\n   https://github.com/borkdude/sci\")\r\n\r\n\r\n(defn remove-from-vec\r\n  \"Returns a new vector with the element at 'index' removed.\r\n\r\n  (remove-from-vec [:a :b :c] 1)  =>  [:a :c]\"\r\n  [v index]\r\n  (vec (concat (subvec v 0 index) (subvec v (inc index)))))\r\n\r\n\r\n(defn index-of\r\n  [col val]\r\n  (first (keep-indexed (fn [idx x]\r\n                         (when (= x val)\r\n                           idx))\r\n                       col)))\r\n\r\n\r\n(defcard sci-examples\r\n  (for [[s opts]\r\n        [[\"(inc 1)\"]\r\n         [\"x\" {:bindings {'x 1}}]\r\n         [\"{:hiccup [:span \\\"Hello\\\"]}\"]\r\n         [\"(def a 1)\"]\r\n         [\":a\"]\r\n         [\"(require '[lib]) lib/msg\" {:namespaces {'lib {'msg \"hi\"}}}]]]\r\n    (merge {:s s :result (sci/eval-string s opts)}\r\n           (when opts\r\n             {:opts opts}))))\r\n\r\n\r\n(def key-code->key\r\n  {8   :backspace\r\n   9   :tab\r\n   13  :return\r\n   57  :left-paren\r\n   219 :left-brace})\r\n\r\n\r\n(def empty-box\r\n  {:str-content \"\"\r\n   :children-ids []})\r\n\r\n\r\n(defcard \"\r\n  ## Experiment #1\r\n   - A tree of boxes\r\n   - If a box's `:str-content` begins with `:sci`,\r\n     evaluate the rest of the string with SCI and assign it to `:result`\r\n   - Child boxes are passed their parent's `:result` as `*1`, like a REPL\r\n   - Every time a box's content changes, naively re-evaluate the whole tree top to bottom!\r\n   - If a box's `:result` is a map with a `hiccup` key, render it after the box\r\n\r\n  ENTER key makes a new sibling (if not root)\r\n\r\n  SHIFT-ENTER to make a new line\r\n\r\n  BACKSPACE in an empty box deletes it\r\n  \")\r\n\r\n\r\n(defonce box-state*\r\n  (rg/atom {:next-id 4\r\n            :boxes {0 (merge empty-box {:children-ids [1 3]\r\n                                        :str-content \":sci {:message \\\"\ud83c\udf3b\\\" :size 70}\"})\r\n                    1 (merge empty-box {:children-ids [2]\r\n                                        :str-content \":sci (merge *1 {:hiccup [:div {:style {:font-size (:size *1)}} (:message *1)]})\"})\r\n\r\n                    2 (merge empty-box {:str-content \"I am just a \ud83c\udf43\"})\r\n                    3 (merge empty-box {:str-content \":sci (:message *1)\"})}}))\r\n\r\n\r\n(defcard box-state* box-state*)\r\n\r\n\r\n(defn get-parent-id\r\n  [boxes child-id]\r\n  (some (fn [[id box]]\r\n          (when (some #{child-id} (:children-ids box))\r\n            id))\r\n        boxes))\r\n\r\n\r\n(defn sci-node?\r\n  [{:keys [str-content]}]\r\n  (str/starts-with? str-content \":sci\"))\r\n\r\n\r\n(defn eval-box\r\n  [{:keys [str-content] :as box} parent]\r\n  (if-not (sci-node? box)\r\n    box\r\n    (let [code (subs str-content 4)\r\n          result (try\r\n                   (sci/eval-string code {:bindings {'*1 (:result parent)}})\r\n                   (catch js/Error e\r\n                     (trace e)))]\r\n      (assoc box :result result))))\r\n\r\n\r\n;; very naive depth-first search, probably buggy\r\n(defn next-box-id\r\n  [boxes visited id]\r\n  (if (not (visited id))\r\n    id\r\n    (let [go-up #(when-let [parent-id (get-parent-id boxes id)]\r\n                   (next-box-id boxes visited parent-id))]\r\n      (if-let [children (-> boxes (get id) :children-ids seq)]\r\n        (if-let [unvisited-child (some #(when (not (visited %))\r\n                                          %)\r\n                                       children)]\r\n          unvisited-child\r\n          (go-up))\r\n        (let [parent (get-parent-id boxes id)\r\n              siblings (:children-ids parent)]\r\n          (if-let [unvisited-sibling (some #(when (not (visited %))\r\n                                              %)\r\n                                           siblings)]\r\n            unvisited-sibling\r\n            (go-up)))))))\r\n\r\n\r\n(defn eval-all-boxes\r\n  [boxes]\r\n  (loop [boxes boxes\r\n         visited #{}\r\n         id 0]\r\n    (let [box (get boxes id)\r\n          parent (get boxes (get-parent-id boxes id))\r\n          boxes' (assoc boxes id (eval-box box parent))\r\n          visited' (conj visited id)\r\n          id' (next-box-id boxes visited' id)]\r\n      (if-not id'\r\n        boxes'\r\n        (recur boxes' visited' id')))))\r\n\r\n\r\n(defn add-child\r\n  [{:keys [children-ids] :as box} idx id]\r\n  (let [new-idx (inc idx)]\r\n    (assoc box :children-ids (apply conj\r\n                                    (subvec children-ids 0 new-idx)\r\n                                    id\r\n                                    (subvec children-ids new-idx)))))\r\n\r\n\r\n(defn remove-child\r\n  [parent child-id]\r\n  (let [idx (index-of (:children-ids parent) child-id)]\r\n    (update parent :children-ids remove-from-vec idx)))\r\n\r\n\r\n(defn add-sibling\r\n  [{:keys [next-id boxes] :as state} id]\r\n  (let [parent-id (get-parent-id boxes id)\r\n        siblings (get-in boxes [parent-id :children-ids])\r\n        idx (index-of siblings id)]\r\n    (-> state\r\n        (update :next-id inc)\r\n        (update :boxes update parent-id add-child idx next-id)\r\n        (update :boxes assoc next-id empty-box)\r\n        (update :boxes eval-all-boxes))))\r\n\r\n\r\n(defn delete-box\r\n  [{:keys [boxes] :as state} id]\r\n  (let [parent-id (get-parent-id boxes id)]\r\n    (-> state\r\n        (update-in [:boxes parent-id] remove-child id)\r\n        (update :boxes dissoc id)\r\n        (update :boxes eval-all-boxes))))\r\n\r\n\r\n(defn update-box-content\r\n  [boxes id value]\r\n  (update boxes id assoc :str-content value))\r\n\r\n\r\n(defn handle-return-key!\r\n  [e id]\r\n  (.preventDefault e)\r\n  (swap! box-state* add-sibling id))\r\n\r\n\r\n(defn handle-backspace-key!\r\n  [e id]\r\n  (let [{:keys [str-content]} (get-in @box-state* [:boxes id])]\r\n    (when (empty? str-content)\r\n      (.preventDefault e)\r\n      (swap! box-state* delete-box id))))\r\n\r\n\r\n(defn handle-box-key-down!\r\n  [e id]\r\n  (let [key-code (.-keyCode e)\r\n        shift? (.-shiftKey e)\r\n        k (key-code->key key-code)]\r\n    (case k\r\n      :return (when (not shift?)\r\n                (handle-return-key! e id))\r\n      :backspace (handle-backspace-key! e id)\r\n      nil)))\r\n\r\n\r\n(defn handle-box-change!\r\n  [e id]\r\n  (let [target (.-target e)\r\n        value (.-value target)]\r\n    (swap! box-state*\r\n           #(-> %\r\n                (update :boxes update-box-content id value)\r\n                (update :boxes eval-all-boxes)))))\r\n\r\n\r\n(defn sci-result-component\r\n  [result]\r\n  (when result\r\n    (let [{:keys [hiccup]} result]\r\n      (if hiccup\r\n        hiccup\r\n        (str result)))))\r\n\r\n\r\n;; resulting :hiccup could be malformed, catch errors & allow retry\r\n(defn sci-result-wrapper\r\n  []\r\n  (let [err* (rg/atom nil)]\r\n    (rg/create-class\r\n      {:component-did-catch (fn [err info]\r\n                              (reset! err* [err info]))\r\n       :reagent-render (fn [result]\r\n                         (if (nil? @err*)\r\n                           [sci-result-component result]\r\n                           (let [[_ info] @err*]\r\n                             [:div\r\n                              [:code (str info)]\r\n                              [:div\r\n                               [:button {:on-click #(reset! err* nil)}\r\n                                \"re-render\"]]])))})))\r\n\r\n\r\n(defn box-component\r\n  [id]\r\n  (let [{:keys [boxes]} @box-state*\r\n        {:keys [str-content children-ids result] :as box} (get boxes id)]\r\n    [:div\r\n     [:div {:style {:display \"flex\"}}\r\n      id\r\n      [:textarea {:style {:font-size \"1rem\"\r\n                          :width \"30rem\"}\r\n                  :value str-content\r\n                  :on-change #(handle-box-change! % id)\r\n                  :on-key-down #(handle-box-key-down! % id)}]\r\n      (when (sci-node? box)\r\n        [sci-result-wrapper result])]\r\n     (when (seq children-ids)\r\n       (into [:div {:style {:margin-left \"1rem\"}}]\r\n             (for [id children-ids]\r\n               [box-component id])))]))\r\n\r\n\r\n(defcard-rg boxes\r\n  (do\r\n    (swap! box-state* update :boxes eval-all-boxes)\r\n    [box-component 0]))\r\n"]}