{"version":3,"sources":["athens/devcards/textinput.cljs"],"mappings":";;;;;;;;;AAcA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA,AAEK,AAAA,AAACC,AACK,AAAA,AAACA,AAEF,AAAA,AAACA,AAGU,AAAA,AAAA,AAACC,AAIkB,AAAA,AAAcC,AACf,AAAA,AAAIC,AAGW,AAAA,AAAIA;AAG/D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAQL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAOK,AAAA,AAACL,AACC,AAAA,AAAcE;AAM1B,AAAA,AAAAI,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AAEWO;AAFX,AAAAH,AAAAJ,AAAA,AAGWQ;AAHX,AAAAJ,AAAAJ,AAAA,AAIWS;AAJX,AAAAL,AAAAJ,AAAA,AAKWU;AALX,AAAAN,AAAAJ,AAAA,AAMWW;AANX,AAAAP,AAAAJ,AAAA,AAOWY;AAPX,AAAAR,AAAAJ,AAAA,AAQWa;AARX,AASE,AAAIA;AAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAACC,AAAUjB,AACR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACkB,AAAU,AAACC,AAAMxB,AAAgBoB,AAAcN,AACKC,AACGC,AACPG,AACID,AACED,AACxD,AAACK,AAAUhB,AAAYe;;AARjC,AAAA,AASU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAAU,AAACC,AAAMxB,AAAgBoB,AAAcN,AACKC,AACGC,AACPG,AACID,AACED;;;AAMnE,AAIA","names":["athens.devcards.textinput/textinput-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.style/OPACITIES","athens.style/DEPTH-SHADOWS","athens.devcards.textinput/input-wrap","athens.devcards.textinput/input-icon","p__87496","map__87497","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.devcards.textinput/textinput","type","autoFocus","defaultValue","placeholder","on-change","value","style","icon","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns athens.devcards.textinput\r\n  (:require\r\n    [\"@material-ui/icons\" :as mui-icons]\r\n    [athens.db]\r\n    [athens.style :refer [color OPACITIES DEPTH-SHADOWS]]\r\n    [cljsjs.react]\r\n    [cljsjs.react.dom]\r\n    [devcards.core :refer-macros [defcard-rg]]\r\n    [stylefy.core :as stylefy :refer [use-style]]))\r\n\r\n\r\n;;; Styles\r\n\r\n\r\n(def textinput-style\r\n  {:min-height \"32px\"\r\n   :color (color :body-text-color)\r\n   :caret-color (color :link-color)\r\n   :border-radius \"4px\"\r\n   :background (color :panel-color)\r\n   :padding \"2px 8px\"\r\n   :flex-basis \"100%\"\r\n   :border [[\"1px solid \" (color :body-text-color :opacity-low)]]\r\n   :transition-property \"box-shadow, border, background\"\r\n   :transition-duration \"0.1s\"\r\n   :transition-timing-function \"ease\"\r\n   ::stylefy/manual [[:placeholder {:opacity (:opacity-med OPACITIES)}]\r\n                     [:&:hover {:box-shadow (:4 DEPTH-SHADOWS)}]\r\n                     [:&:focus :&:focus:hover {:outline \"none\"\r\n                                               :border \"1px solid\"\r\n                                               :box-shadow (:8 DEPTH-SHADOWS)}]]})\r\n\r\n\r\n(def input-wrap\r\n  {:position \"relative\"\r\n   :display \"inline-flex\"\r\n   :align-items \"stretch\"\r\n   :justify-content \"stretch\"\r\n   ::stylefy/manual [[:input {:padding-left \"28px\"}]]})\r\n\r\n\r\n(def input-icon\r\n  {:position \"absolute\"\r\n   :top \"50%\"\r\n   :display \"flex\"\r\n   :pointer-events \"none\"\r\n   :transform \"translateY(-50%)\"\r\n   :left \"6px\"\r\n   :color (color :body-text-color)\r\n   :opacity (:opacity-med OPACITIES)\r\n   ::stylefy/manual [[:svg {:font-size \"20px\"}]]})\r\n\r\n\r\n;;; Components\r\n\r\n(defn textinput\r\n  [{:keys [type\r\n           autoFocus\r\n           defaultValue\r\n           placeholder\r\n           on-change\r\n           value\r\n           style\r\n           icon]}]\r\n  (if icon\r\n    [:div (use-style input-wrap)\r\n     [:input (use-style (merge textinput-style style) {:type type\r\n                                                       :autoFocus autoFocus\r\n                                                       :defaultValue defaultValue\r\n                                                       :value value\r\n                                                       :on-change on-change\r\n                                                       :placeholder placeholder})]\r\n     [:span (use-style input-icon) icon]]\r\n    [:input (use-style (merge textinput-style style) {:type type\r\n                                                      :autoFocus autoFocus\r\n                                                      :defaultValue defaultValue\r\n                                                      :value value\r\n                                                      :on-change on-change\r\n                                                      :placeholder placeholder})]))\r\n\r\n\r\n;;; Devcards\r\n\r\n\r\n(defcard-rg Input\r\n  [textinput {:placeholder \"pink\"}])\r\n\r\n\r\n(defcard-rg Input-with-icon\r\n  [textinput {:placeholder \"pink\" :icon [:> mui-icons/Face]}])\r\n\r\n"]}